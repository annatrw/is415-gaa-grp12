[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "analysis/SPPA/SPPA.html",
    "href": "analysis/SPPA/SPPA.html",
    "title": "Spatial Point Pattern Analysis",
    "section": "",
    "text": "pacman::p_load(maptools, sf, sp, rgdal, raster, spatstat, tmap, tidyverse, plotly, devtools)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "is415-gaa-grp12",
    "section": "",
    "text": "We are a group of students under Prof Kam, doing IS415 Geospatial Analytics and Applications AY2022-23 Semester 2.\nimport the data\n\n# run the code\n\nmichelle’s test… please work\nanother test"
  },
  {
    "objectID": "proposal/proposal.html#spatial-point-patterns-analysis",
    "href": "proposal/proposal.html#spatial-point-patterns-analysis",
    "title": "Project Proposal",
    "section": "1.0 Spatial Point Patterns Analysis",
    "text": "1.0 Spatial Point Patterns Analysis\n\n1.1 First-order Spatial Point Patterns Analysis\nKernel Density Estimation Analysis: We could develop kernel density estimation analysis on Airbnb’s listing before and after covid, this could provide us valuable insights into the spatial distribution of Beijing’s Airbnb, identifying the hotspots for tourism, and see if the covid has changed this pattern and figure out the reason behind it.\n\n\n1.2 Second-order Spatial Point Patterns Analysis\nAfter we analysed the spatial point patterns, we have to confirm the observations statistically by choosing representative study areas using L function. The hypothesis is as follows: - H0: The distribution of Airbnb Listings in beijing are randomly distributed. - H1: The distribution of Airbnb Listings are not randomly distributed."
  },
  {
    "objectID": "proposal/proposal.html#network-constrained-spatial-point-pattern-analysis",
    "href": "proposal/proposal.html#network-constrained-spatial-point-pattern-analysis",
    "title": "Project Proposal",
    "section": "2.0 Network Constrained Spatial Point Pattern Analysis",
    "text": "2.0 Network Constrained Spatial Point Pattern Analysis\nWe will analyse the point events - location of Airbnb listings in Beijing that occurs alongside the local road network.\n\n2.1 Network Constrained KDE Analysis\nUsing network constrained KDE analysis, it will visualise the road segments where higher density of Airbnb listings are located at. Before and after Covid KDE maps will be available for comparison.\n\n\n2.2 Network Constrained G, K function Analysis\n\n\n2.3 Cross K function Analysis\nHo = The distribution of Airbnb listings before and after Covid are spatially independent.\nH1= The distribution of Airbnb listings before and after Covid are NOT spatially independent.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001 (i.e. at 99.9% confident interval)."
  },
  {
    "objectID": "analysis/SPPA/SPPA.html#aspatial",
    "href": "analysis/SPPA/SPPA.html#aspatial",
    "title": "Spatial Point Pattern Analysis",
    "section": "Aspatial",
    "text": "Aspatial\n\nbefore <- read_csv(\"data/aspatial/listings.csv\")\n\n\nafter <- read_csv(\"data/aspatial/listings_after.csv\")\n\n\ncolnames(before)\n\n  [1] \"id\"                                          \n  [2] \"listing_url\"                                 \n  [3] \"scrape_id\"                                   \n  [4] \"last_scraped\"                                \n  [5] \"name\"                                        \n  [6] \"summary\"                                     \n  [7] \"space\"                                       \n  [8] \"description\"                                 \n  [9] \"experiences_offered\"                         \n [10] \"neighborhood_overview\"                       \n [11] \"notes\"                                       \n [12] \"transit\"                                     \n [13] \"access\"                                      \n [14] \"interaction\"                                 \n [15] \"house_rules\"                                 \n [16] \"thumbnail_url\"                               \n [17] \"medium_url\"                                  \n [18] \"picture_url\"                                 \n [19] \"xl_picture_url\"                              \n [20] \"host_id\"                                     \n [21] \"host_url\"                                    \n [22] \"host_name\"                                   \n [23] \"host_since\"                                  \n [24] \"host_location\"                               \n [25] \"host_about\"                                  \n [26] \"host_response_time\"                          \n [27] \"host_response_rate\"                          \n [28] \"host_acceptance_rate\"                        \n [29] \"host_is_superhost\"                           \n [30] \"host_thumbnail_url\"                          \n [31] \"host_picture_url\"                            \n [32] \"host_neighbourhood\"                          \n [33] \"host_listings_count\"                         \n [34] \"host_total_listings_count\"                   \n [35] \"host_verifications\"                          \n [36] \"host_has_profile_pic\"                        \n [37] \"host_identity_verified\"                      \n [38] \"street\"                                      \n [39] \"neighbourhood\"                               \n [40] \"neighbourhood_cleansed\"                      \n [41] \"neighbourhood_group_cleansed\"                \n [42] \"city\"                                        \n [43] \"state\"                                       \n [44] \"zipcode\"                                     \n [45] \"market\"                                      \n [46] \"smart_location\"                              \n [47] \"country_code\"                                \n [48] \"country\"                                     \n [49] \"latitude\"                                    \n [50] \"longitude\"                                   \n [51] \"is_location_exact\"                           \n [52] \"property_type\"                               \n [53] \"room_type\"                                   \n [54] \"accommodates\"                                \n [55] \"bathrooms\"                                   \n [56] \"bedrooms\"                                    \n [57] \"beds\"                                        \n [58] \"bed_type\"                                    \n [59] \"amenities\"                                   \n [60] \"square_feet\"                                 \n [61] \"price\"                                       \n [62] \"weekly_price\"                                \n [63] \"monthly_price\"                               \n [64] \"security_deposit\"                            \n [65] \"cleaning_fee\"                                \n [66] \"guests_included\"                             \n [67] \"extra_people\"                                \n [68] \"minimum_nights\"                              \n [69] \"maximum_nights\"                              \n [70] \"minimum_minimum_nights\"                      \n [71] \"maximum_minimum_nights\"                      \n [72] \"minimum_maximum_nights\"                      \n [73] \"maximum_maximum_nights\"                      \n [74] \"minimum_nights_avg_ntm\"                      \n [75] \"maximum_nights_avg_ntm\"                      \n [76] \"calendar_updated\"                            \n [77] \"has_availability\"                            \n [78] \"availability_30\"                             \n [79] \"availability_60\"                             \n [80] \"availability_90\"                             \n [81] \"availability_365\"                            \n [82] \"calendar_last_scraped\"                       \n [83] \"number_of_reviews\"                           \n [84] \"number_of_reviews_ltm\"                       \n [85] \"first_review\"                                \n [86] \"last_review\"                                 \n [87] \"review_scores_rating\"                        \n [88] \"review_scores_accuracy\"                      \n [89] \"review_scores_cleanliness\"                   \n [90] \"review_scores_checkin\"                       \n [91] \"review_scores_communication\"                 \n [92] \"review_scores_location\"                      \n [93] \"review_scores_value\"                         \n [94] \"requires_license\"                            \n [95] \"license\"                                     \n [96] \"jurisdiction_names\"                          \n [97] \"instant_bookable\"                            \n [98] \"is_business_travel_ready\"                    \n [99] \"cancellation_policy\"                         \n[100] \"require_guest_profile_picture\"               \n[101] \"require_guest_phone_verification\"            \n[102] \"calculated_host_listings_count\"              \n[103] \"calculated_host_listings_count_entire_homes\" \n[104] \"calculated_host_listings_count_private_rooms\"\n[105] \"calculated_host_listings_count_shared_rooms\" \n[106] \"reviews_per_month\"                           \n\n\n\ncolnames(after)\n\n [1] \"id\"                             \"name\"                          \n [3] \"host_id\"                        \"host_name\"                     \n [5] \"neighbourhood_group\"            \"neighbourhood\"                 \n [7] \"latitude\"                       \"longitude\"                     \n [9] \"room_type\"                      \"price\"                         \n[11] \"minimum_nights\"                 \"number_of_reviews\"             \n[13] \"last_review\"                    \"reviews_per_month\"             \n[15] \"calculated_host_listings_count\" \"availability_365\"              \n[17] \"number_of_reviews_ltm\"          \"license\"                       \n\n\n\nbefore <- subset(before, select=c(id, street, neighbourhood_cleansed, latitude, longitude))\n\n\nafter <- subset(after, select= c(id, neighbourhood, latitude, longitude))\n\n\nsum(is.na(before$latitude))\n\n[1] 0\n\n\n\nsum(is.na(before$longitude))\n\n[1] 0\n\n\n\nsum(is.na(after$latitude))\n\n[1] 0\n\n\n\nsum(is.na(after$longitude))\n\n[1] 0\n\n\n\nbefore_sf <- st_as_sf(before, coords=c(\"longitude\", \"latitude\"), crs=4326) %>% st_transform(crs=4555)\n\n\nafter_sf <- st_as_sf(after, coords=c(\"longitude\", \"latitude\"), crs=4326) %>% st_transform(crs=4555)"
  },
  {
    "objectID": "analysis/SPPA/SPPA.html#geospatial",
    "href": "analysis/SPPA/SPPA.html#geospatial",
    "title": "Spatial Point Pattern Analysis",
    "section": "Geospatial",
    "text": "Geospatial\n\nnbh_sf <- st_read(\"data/aspatial/neighbourhoods.geojson\") %>%\n  st_transform(crs=4555)\n\nReading layer `neighbourhoods' from data source \n  `C:\\annatrw\\is415-gaa-grp12\\analysis\\SPPA\\data\\aspatial\\neighbourhoods.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 16 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 115.4172 ymin: 39.44247 xmax: 117.5071 ymax: 41.05861\nGeodetic CRS:  WGS 84\n\n\n\nst_crs(nbh_sf)\n\nCoordinate Reference System:\n  User input: EPSG:4555 \n  wkt:\nGEOGCRS[\"New Beijing\",\n    DATUM[\"New Beijing\",\n        ELLIPSOID[\"Krassowsky 1940\",6378245,298.3,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Topographic mapping.\"],\n        AREA[\"China - onshore.\"],\n        BBOX[18.11,73.62,53.56,134.77]],\n    ID[\"EPSG\",4555]]\n\n\n\nlength(which(st_is_valid(nbh_sf) == FALSE))\n\n[1] 0\n\n\n\nnbh_sf[rowSums(is.na(nbh_sf))!=0,]\n\nSimple feature collection with 16 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 115.4172 ymin: 39.44247 xmax: 117.5071 ymax: 41.05861\nGeodetic CRS:  New Beijing\nFirst 10 features:\n          neighbourhood neighbourhood_group                       geometry\n1                东城区                <NA> MULTIPOLYGON (((116.4423 39...\n2                西城区                <NA> MULTIPOLYGON (((116.3916 39...\n3                昌平区                <NA> MULTIPOLYGON (((116.0427 40...\n4       大兴区 / Daxing                <NA> MULTIPOLYGON (((116.7347 39...\n5                房山区                <NA> MULTIPOLYGON (((116.2466 39...\n6      怀柔区 / Huairou                <NA> MULTIPOLYGON (((116.279 40....\n7  门头沟区 / Mentougou                <NA> MULTIPOLYGON (((115.563 39....\n8        密云县 / Miyun                <NA> MULTIPOLYGON (((116.8826 40...\n9       平谷区 / Pinggu                <NA> MULTIPOLYGON (((117.3813 40...\n10     延庆县 / Yanqing                <NA> MULTIPOLYGON (((116.279 40....\n\n\n\nnbh_sf <- subset(nbh_sf, select=-c(neighbourhood_group))\n\n\nplot(st_geometry(nbh_sf))\n\n\n\n\n\ntmap_mode(\"view\")\ntm_shape(before_sf) +\n  tm_dots(col=\"blue\", size=0.05)\n\n\n\n\n\n\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "analysis/SPPA/SPPA.html#initial-viz",
    "href": "analysis/SPPA/SPPA.html#initial-viz",
    "title": "Spatial Point Pattern Analysis",
    "section": "Initial viz",
    "text": "Initial viz\n\ntmap_mode(\"plot\")+\n  qtm(nbh_sf) +\n  tm_shape(before_sf)+\n  tm_dots()\n\n\n\n\n\ntmap_mode(\"plot\")+\n  qtm(nbh_sf) +\n  tm_shape(after_sf)+\n  tm_dots()"
  },
  {
    "objectID": "analysis/SPPA/SPPA.html#remove-excess-points-falling-outside-of-study-area",
    "href": "analysis/SPPA/SPPA.html#remove-excess-points-falling-outside-of-study-area",
    "title": "Spatial Point Pattern Analysis",
    "section": "Remove excess points falling outside of study area",
    "text": "Remove excess points falling outside of study area\nbefore covid\n\nout_before <- before_sf[lengths(st_intersects(before_sf, nbh_sf))==0,]\n\n\ntmap_mode(\"plot\")\ntm_shape(nbh_sf) +\n  tm_polygons() +\ntm_shape(out_before) +\n  tm_dots(size = 0.01,\n          col = \"darkblue\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\n^before covid data points all inside beijing ploygon yay\nafter covid\n\nout <- after_sf[lengths(st_intersects(after_sf, nbh_sf))==0,]\n\n\ntmap_mode(\"plot\")\ntm_shape(nbh_sf) +\n  tm_polygons() +\ntm_shape(out) +\n  tm_dots(size = 0.01,\n          col = \"red\",\n          border.col=\"black\",\n          border.lwd=0.5)\n\n\n\n\n\nafter_sf <- subset(after_sf, lengths(st_intersects(after_sf, nbh_sf))!=0,)\n\n\ntmap_mode(\"plot\")\ntm_shape(nbh_sf) +\n  tm_polygons() +\ntm_shape(after_sf) +\n  tm_dots(size = 0.01,\n          col = \"blue\",\n          border.col=\"black\",\n          border.lwd=0.5)"
  },
  {
    "objectID": "analysis/SPPA/SPPA.html#owin-object",
    "href": "analysis/SPPA/SPPA.html#owin-object",
    "title": "Spatial Point Pattern Analysis",
    "section": "owin object",
    "text": "owin object\n\nbeijing_owin <- as(nbh_sp, \"owin\")\n\n\nplot(beijing_owin)\n\n\n\n\n\nsummary(beijing_owin)\n\nWindow: polygonal boundary\n18 separate polygons (1 hole)\n                  vertices       area relative.area\npolygon 1              519   42761500      0.002550\npolygon 2              426   51660900      0.003080\npolygon 3              633 1372690000      0.081900\npolygon 4              341 1027880000      0.061300\npolygon 5              383 2041010000      0.122000\npolygon 6              420 2172680000      0.130000\npolygon 7              631 1476840000      0.088100\npolygon 8              524 2274950000      0.136000\npolygon 9              231  978622000      0.058400\npolygon 10             225 2042320000      0.122000\npolygon 11             162   10821800      0.000645\npolygon 12             906  465198000      0.027700\npolygon 13             791  311701000      0.018600\npolygon 14             789  440437000      0.026300\npolygon 15             260 1032410000      0.061600\npolygon 16 (hole)      162  -10821800     -0.000645\npolygon 17             332  950075000      0.056700\npolygon 18             371   86719800      0.005170\nenclosing rectangle: [1390466.6, 1558549.9] x [4428650, 4610846] units\n                     (168100 x 182200 units)\nWindow area = 16767900000 square units\nFraction of frame area: 0.548\n\n\n\nbeforeBeijing_ppp = before_ppp[beijing_owin]\nafterBeijing_ppp = after_ppp[beijing_owin]\n\n\nplot(beforeBeijing_ppp)\n\n\n\n\n\nplot(afterBeijing_ppp)\n\n\n\n\n\n# essentially, we're telling the function 'new unit length is 1000'\n# function will divide the old value by 1000 to obtain values expressed in kilometers\n# while this section isn't using listings_2021 yet, we'll prep it with the rest of our data :^)\n\nbefore_ppp_Beijing_km <- rescale(beforeBeijing_ppp, 1000, 'km')\nafter_ppp_Beijing_km <- rescale(afterBeijing_ppp, 1000, 'km')"
  },
  {
    "objectID": "analysis/Data/DataWrangling.html",
    "href": "analysis/Data/DataWrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "empty doc for quanfang to place data wrangling"
  },
  {
    "objectID": "analysis/Network-Constrained/NetworkConstrained.html",
    "href": "analysis/Network-Constrained/NetworkConstrained.html",
    "title": "Network Constrained",
    "section": "",
    "text": "doc for michelle to place network constrained"
  }
]